// C++ program for B-Tree insertion
#include<iostream>
using namespace std;

// A BTree node
class BTreeNode
{
    int *keys; // An array of keys for each node
    int t; // Minimum degree (defines the number of keys)
    BTreeNode **C; // An array of child pointers
    int n; // Current number of keys
    bool leaf; // Is true when node is leaf. Otherwise false
    public:
    BTreeNode(int _t, bool _leaf); // Constructor

    // A function to insert a new key when the node must be non-full when this
    // function is called
    void insertNonFull(int k);

    // A function to split the child y of this node. i is index of y in
    // child array C[]. The Child y must be full when this function is called
    void splitChild(int i, BTreeNode *y);

    // A function to traverse all nodes in a subtree
    void traverse();

    //A function to print elements
    void LevelOrder();

    // A function to search a key in the subtree rooted with this node.
    BTreeNode *search(int k); // returns NULL if k is not present.

    // Make BTree friend of this so that we can access private members of this
    // class in BTree functions
    friend class BTree;
};

// A BTree
class BTree
{
    BTreeNode *root; // Pointer to root node
    int t; // Minimum degree
    public:
    // Constructor (Initializes tree as empty)
    BTree(int _t)
    { root = NULL; t = _t; }

    // function to traverse the tree
    void traverse()
    { if (root != NULL) root->traverse(); }

    // function to search a key in this tree
    BTreeNode* search(int k)
    { return (root == NULL)? NULL : root->search(k); }

    // The main function that inserts a new key in this B-Tree
    void insert(int k);

    //Function to traverse the tree
    void LevelOrder(){if(root!=NULL)root->LevelOrder();}
};

// Constructor for BTreeNode class
BTreeNode::BTreeNode(int t1, bool leaf1)
{
    // Copy the given minimum degree and leaf property
    t = t1;
    leaf = leaf1;

    // Allocate memory for maximum number of possible keys
    // and child pointers
    keys = new int[t-1];
    C = new BTreeNode *[t];

    // Initialize the number of keys as 0
    n = 0;
}

// Function to traverse all nodes in a subtree rooted with this node
void BTreeNode::traverse()
{
    // There are n keys and n+1 children, travers through n keys
    // and first n children
    int i;
    for (i = 0; i < n; i++)
    {
    // If this is not leaf, then before printing key[i],
    // traverse the subtree rooted with child C[i].
    //cout<<" Child [ "<<i<<" ]  : ";
    if (leaf == false){
    cout<<"Child [ "<<i<<" ] \n";
    C[i]->traverse();
    }
    cout << "\t i "<< i <<"  "<< keys[i];
    }
        cout<<"\n";
    // Print the subtree rooted with last child
    if (leaf == false)
    C[i]->traverse();
}

void BTreeNode::LevelOrder()
{
    cout<<"\n";
    for(int i=0;i<n;i++)
    {
        cout<<"\t"<<i<<" "<<keys[i];
    }
    if(leaf==false)
    {
        cout<<"\n Not Leaf\n";
        for(int i=0;i<=n;i++){
        cout<<"\nChild [ "<<i<<" ] \n";
            C[i]->LevelOrder();
        }
    }
}

// Function to search key k in subtree rooted with this node
BTreeNode *BTreeNode::search(int k)
{
// Find the first key greater than or equal to k
    int i = 0;
    while (i < n && k > keys[i])
    i++;

    // If the found key is equal to k, return this node
    if (keys[i] == k)
    return this;

    // If key is not found here and this is a leaf node
    if (leaf == true)
    return NULL;

    // Go to the appropriate child
    return C[i]->search(k);
}

// The main function that inserts a new key in this B-Tree
void BTree::insert(int k)
{
// If tree is empty
    cout<<"\n Insert Function \n";
    if (root == NULL)
    {
        // Allocate memory for root
        root = new BTreeNode(t, true);
        root->keys[0] = k; // Insert key
        root->n = 1; // Update number of keys in root
    }
    else // If tree is not empty
    {
        root->insertNonFull(k);
        cout<<"\nBefore Splitting\n";
        root->LevelOrder();
        // If root is full, then tree grows in height
        if (root->n == t)
        {
            cout<<"\n Root is full\n";
            // Allocate memory for new root
            BTreeNode *s = new BTreeNode(t, false);

            // Make old root as child of new root
            s->C[0] = root;
            cout<<"\n Calling Split child\n";
            // Split the old root and move 1 key to the new root
            s->splitChild(0, root);

            // New root has two children now. Decide which of the
            // two children is going to have new key
            /*int i = 0;
            if (s->keys[0] < k)
            i++;
            s->C[i]->insertNonFull(k);
            */
            // Change root
            root = s;
        }
        //else // If root is not full, call insertNonFull for root
        // root->insertNonFull(k);
    }
}

// A utility function to insert a new key in this node
// The assumption is, the node must be non-full when this
// function is called
void BTreeNode::insertNonFull(int k)
{
// Initialize index as index of rightmost element
    int i = n-1;

    // If this is a leaf node
    if (leaf == true)
    {
        // The following loop does two things
        // a) Finds the location of new key to be inserted
        // b) Moves all greater keys to one place ahead
        while (i >= 0 && keys[i] > k)
        {
            keys[i+1] = keys[i];
            i--;
        }

        // Insert the new key at found location
        keys[i+1] = k;
        n = n+1;
    }
    else // If this node is not leaf
    {
        // Find the child which is going to have the new key
        while (i >= 0 && keys[i] > k)
            i--;
        C[i+1]->insertNonFull(k);
        // See if the found child is full
        if (C[i+1]->n == t)
        {
        // If the child is full, then split it
            splitChild(i+1, C[i+1]);

        // After split, the middle key of C[i] goes up and
        // C[i] is splitted into two. See which of the two
        // is going to have the new key
            if (keys[i+1] < k)
                i++;
        }
        //C[i+1]->insertNonFull(k);
    }
}

// A utility function to split the child y of this node
// Note that y must be full when this function is called
void BTreeNode::splitChild(int i, BTreeNode *y)
{
    // Create a new node which is going to store (t-1) keys
    // of y
    BTreeNode *z = new BTreeNode(y->t, y->leaf);
    int val,mid;
    if(t%2==1){
        z->n = t/2;
        val=t/2+1;
        mid=(t-1)/2;
    }
    else{
        z->n = t/2;
        val = t/2;
        mid = t/2-1;
    }
    cout<<"\n i : "<<i<<"\n Z->n : "<< z->n<<"\n Val : "<<val<<"\n Mid-index : "<<mid << "\n Values in Z :- \n";
    // Copy the last (t/2) keys of y to z
    for (int j = 0; j < z->n; j++){
        cout<< y->keys[j+val]<<"\t";
    z->keys[j] = y->keys[j+val];
    }
    // Copy the last t children of y to z
    if (y->leaf == false)
    {
        for (int j = 0; j < val;j++)
            z->C[j] = y->C[j+val];
    }

    // Reduce the number of keys in y
    if(t%2==1)
        y->n = t/2;
    else
    y->n=t/2-1;
    cout<<"\n Y->n : "<< y->n<<"\n";
    // Since this node is going to have a new child,
    // create space of new child
    for (int j = n; j >= i+1; j--)
    C[j+1] = C[j];

    // Link the new child to this node
    C[i+1] = z;

    // A key of y will move to this node. Find the location of
    // new key and move all greater keys one space ahead
    for (int j = n-1; j >= i; j--)
        keys[j+1] = keys[j];

    // Copy the middle key of y to this node
    keys[i] = y->keys[mid];

    // Increment count of keys in this node
    n = n + 1;
}

// Driver program to test above functions
int main()
{
    int degree;
    cout<<"\nEnter the degree : ";
    cin>>degree;
    BTree mytree(degree);
    int choice=1,key;
    while (choice)
    {
        cout<<"\n1.Insert\n2.Display\n3.Inorder\nChoice: ";
        cin>>choice;
        if(choice==1)
        {
            cout<<"\n Enter the element : ";
            cin>>key;
            mytree.insert(key);
        }
        else if(choice==2)
        {
           mytree.LevelOrder();
           cout<<"\n";
        }
        else if(choice == 3)
        {
            mytree.traverse();
            cout<<"\n";
        }
        else{
            choice=0;
        }
    }
}
